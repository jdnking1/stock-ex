name: Valgrind Memory Check

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  valgrind-check:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
        c_compiler: [gcc]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++


    steps:
    - uses: actions/checkout@v4

    - name: Install deps
      run: >
        sudo apt-get -y update && sudo apt-get -y install git libssl-dev libmysqlclient-dev libpq-dev
       
    - name: Install Poco
      run: |
        sudo apt-get -y update && sudo apt-get -y install git libssl-dev libmysqlclient-dev libpq-dev
        git clone -b main https://github.com/pocoproject/poco.git
        cd poco
        mkdir cmake-build
        cd cmake-build
        cmake ..
        cmake --build . --config Release
        
        echo "Poco_FOUNDATION_INCLUDE=${{ github.workspace }}/poco/Foundation/include" >> $GITHUB_ENV
        echo "Poco_NET_INCLUDE=${{ github.workspace }}/poco/Net/include" >> $GITHUB_ENV
    
    - name: Install Valgrind
      run: sudo apt-get update && sudo apt-get install -y valgrind

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "poco-dir=${{ github.workspace }}/poco/cmake-build/Poco" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DPoco_DIR=${{ steps.strings.outputs.poco-dir }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release

    - name: Test with Valgrind
      run: |
        valgrind --leak-check=full --track-origins=yes --verbose --error-exitcode=1 --log-file=valgrind_output.txt ${{ steps.strings.outputs.build-output-dir }}/test/test
        valgrind --leak-check=full --track-origins=yes --verbose --error-exitcode=1 --log-file=valgrind_output_lfq.txt ${{ steps.strings.outputs.build-output-dir }}/src/utils/lock_free_queue_example
        valgrind --leak-check=full --track-origins=yes --verbose --error-exitcode=1 --log-file=valgrind_output_mp.txt ${{ steps.strings.outputs.build-output-dir }}/src/utils/memory_pool_example
        valgrind --leak-check=full --track-origins=yes --verbose --error-exitcode=1 --log-file=valgrind_output_lg.txt ${{ steps.strings.outputs.build-output-dir }}/src/utils/logger_example
      continue-on-error: true

    - name: Upload Valgrind outputs
      uses: actions/upload-artifact@v3
      with:
        name: valgrind-logs
        path: |
          valgrind_output.txt
          valgrind_output_lfq.txt
          valgrind_output_mp.txt
          valgrind_output_lg.txt
