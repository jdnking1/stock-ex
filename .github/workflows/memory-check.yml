name: Valgrind Memory Check

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  valgrind-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download Boost Artifact
      id: boost-artifact
      uses: actions/download-artifact@v3
      with:
        name: boost-${{ runner.os }}
        path: boost-artifact
      continue-on-error: true

    - name: Extract Boost Artifact
      if: success()
      run: |
        echo "Extracting Boost from artifact..."
        tar -xvf boost-artifact/boost.tar.gz -C $HOME || mkdir -p $HOME/boost-install-dir
        ls $HOME/boost-install-dir

    - name: Install Boost (Linux)
      if: success() == false
      run: |
        curl -L https://boostorg.jfrog.io/artifactory/main/release/1.87.0/source/boost_1_87_0.tar.gz -o boost.tar.gz
        tar -xf boost.tar.gz
        cd boost_1_87_0
        ./bootstrap.sh
        ./b2 install --prefix=~/boost-install-dir

    - name: Save Boost as Artifact
      if: success() == false
      uses: actions/upload-artifact@v3
      with:
        name: boost-${{ runner.os }}
        path: ~/boost-install-dir
        retention-days: 30

    - name: Install Valgrind
      run: sudo apt-get update && sudo apt-get install -y valgrind

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "boost-root=~/boost-install-dir" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=g++
        -DCMAKE_C_COMPILER=gcc
        -DCMAKE_BUILD_TYPE=Release
        -DBOOST_ROOT=${{ steps.strings.outputs.boost-root }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release

    - name: Test with Valgrind
      run: |
        valgrind --leak-check=full --track-origins=yes --verbose --error-exitcode=1 --log-file=valgrind_output.txt ${{ steps.strings.outputs.build-output-dir }}/test/test
        valgrind --leak-check=full --track-origins=yes --verbose --error-exitcode=1 --log-file=valgrind_output_lfq.txt ${{ steps.strings.outputs.build-output-dir }}/src/utils/lock_free_queue_example
        valgrind --leak-check=full --track-origins=yes --verbose --error-exitcode=1 --log-file=valgrind_output_mp.txt ${{ steps.strings.outputs.build-output-dir }}/src/utils/memory_pool_example
        valgrind --leak-check=full --track-origins=yes --verbose --error-exitcode=1 --log-file=valgrind_output_lg.txt ${{ steps.strings.outputs.build-output-dir }}/src/utils/logger_example
      continue-on-error: true

    - name: Upload Valgrind outputs
      uses: actions/upload-artifact@v3
      with:
        name: valgrind-logs
        path: |
          valgrind_output.txt
          valgrind_output_lfq.txt
          valgrind_output_mp.txt
          valgrind_output_lg.txt
